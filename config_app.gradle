import java.text.DateFormat
import java.text.SimpleDateFormat

apply {
    plugin "com.android.application"
    from "${rootDir.path}/version.gradle"

}

ext {
    configAndroidAppDomain = this.&configAndroidAppDomain
    configAppBaseDependences = this.&configAppBaseDependence
    configLibDependences = this.&configLibDependences
}

//app main
def configAndroidAppDomain(Project pro) {
    configDefault(pro)
    configField(pro)
    configSigningAndBuildType(pro)
    configBuildType(pro)
    configProductFlavors(pro)
    configApkName(pro)
    configSourceSets(pro)
    configOption(pro)
}

//app base dependence
def configAppBaseDependence(Project pro) {
    pro.dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])

        implementation baseDependences.appcompat
        implementation baseDependences.material
        implementation baseDependences.constraintlayout

        implementation baseDependences.multidex

        testImplementation baseDependences.junit

        androidTestImplementation baseDependences.runner
        androidTestImplementation baseDependences.espresso_core
    }
}

//app dependences
def configLibDependences(Project pro) {
    pro.dependencies {

        /**
         * Lib
         */

        //lombok
        compileOnly dependencesLibrary.lombok
        annotationProcessor dependencesLibrary.lombok

        //butter knife
        implementation dependencesLibrary.butterknife
        annotationProcessor dependencesLibrary.butterknife_compiler

        //rx
        implementation dependencesLibrary.rxjava
        implementation dependencesLibrary.rxandroid

        //okhttp
        implementation dependencesLibrary.okhttp

        //retrofit
        implementation dependencesLibrary.retrofit
        implementation dependencesLibrary.converter_gson
        implementation dependencesLibrary.adapter_rxjava


        //jsoup
        implementation dependencesLibrary.jsoup

        //rxpermissions
        implementation dependencesLibrary.rxpermissions

        //gaode
        implementation dependencesLibrary.gaode_navi
        implementation dependencesLibrary.gaode_location
        implementation dependencesLibrary.gaode_search
        /**
         * jar
         */

        /**
         * module
         */
        /*
         * leaks 必须使用 debugImplementation 来依赖，不然会解析失败
         * 这是因为在子模块中进行注册依赖是也用的是debugImplementation
         */
        debugImplementation project(':Leaks')
        //The MVP
        implementation project(':Themvp')
        //android utils
        implementation project(':Utils')
        //ImageLoader
        implementation project(':Imageloder')
    }
}

//config Option
def configOption(Project pro) {
    pro.android {
        lintOptions {
            abortOnError false
        }

        dexOptions {
//            incremental = true
//            javaMaxHeapSize "4g"
//            jumboMode = true
        }
        //打包时排出以下文件
        packagingOptions {
            exclude 'META-INF/rxjava.properties'

//            exclude
//            exclude
//            exclude
        }

        compileOptions {
            sourceCompatibility = '1.8'
            targetCompatibility = '1.8'
        }
    }

}

//config sourceSets
def configSourceSets(Project pro) {
    pro.android.sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            //自定义资源文件目录，注意备份
            res.srcDirs =
                    [
                            'src/main/res/',
                            'src/main/res/main',
                            'src/main/res/map',
                            'src/main/res/kline',
                            'src/main/res/other',
                            'src/main/res/rxandroid',
                    ]
        }
        // special build type variants
        debug.setRoot('src/buildtype/debug')
    }
}

//config signing
def configSigningAndBuildType(Project pro) {
    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(),properties['keystore'])
                storePassword(properties['storePassword'])
                keyAlias(properties['keyAlias'])
                keyPassword(properties['keyPassword'])
                v2SigningEnabled true
            }
        }

    }
}

//config build type
def configBuildType(Project pro) {
    pro.android {
        buildTypes {
            /*
           * minifyEnabled　是否开启混淆
           * zipAlignEnabled　是否优化apk文件，将apk文件中未压缩的数据在4个字节边界上对齐，具体见改善android性能工具：Zipalign
           * shrinkResources 是否去除无用资源，任何在编译过程中没有用到的资源或者代码都会被删除，可以有效减小apk体积
           * proguardFiles 指定混淆规则文件
           * */
            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                shrinkResources true
                zipAlignEnabled true
                debuggable false

                buildConfigField "String", "API_HOST", "\"${host_prod}\""
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }

            debug {
                signingConfig signingConfigs.release
                applicationIdSuffix ".debug"
                buildConfigField "String", "API_HOST", "\"${host_default}\""
            }
        }
    }
}

//config ProductFlavors
//config ProductFlavors
def configProductFlavors(Project pro) {
    pro.android.productFlavors {
        androidDemo {}

    }
}

//config defaltConfig
def configDefault(Project pro) {
    pro.android {
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            applicationId androidConfig.applicationId
            minSdkVersion androidConfig.minSdkVersion
            targetSdkVersion androidConfig.targetSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName

            //分割 Dex 文件
            multiDexEnabled true

            //flavorDimensions
            flavorDimensions androidConfig.flavorDimensions
        }
    }

}

//config Field
def configField(Project pro) {

    pro.android.defaultConfig {

        //设置高德APPKEY到Manifest中
        manifestPlaceholders.put("GAODE_KEY", rootProject.ext.gaode.APP_KEY)

        //自定义常量字段
        buildConfigField "String", "SPLASH_URL", "\"${rootProject.ext.splash_resource.splash_url}\""
        buildConfigField "String", "SPLASH_CSSQUERY", "\"${rootProject.ext.splash_resource.splash_cssquery}\""
        buildConfigField "String", "SPLASH_ATTRIBUTEKEY", "\"${rootProject.ext.splash_resource.splash_attributekey}\""


        resValue "string", "app_name", androidConfig.appName
    }
}

def configNdk(Project pro) {
    pro.android {
        defaultConfig {
            externalNativeBuild {
                cmake {
                    cppFlags ""
                }
            }
        }
        externalNativeBuild {
            cmake {
                path "CMakeLists.txt"
            }
        }
    }
}

//config apk name
def configApkName(Project pro) {
    pro.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {//在debug时不重命名安装包
            variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk")
            variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = androidConfig.appName + //APP名称
                        "_" + getUpperCase(variant.buildType.name) + //打包方式
                        "_" + variant.versionName + //APP版本
                        //"_" + getCurrentTime() + //打包时间
                        ".apk"
            }
        }
    }
}

//frist words uppercase
def static getUpperCase(String word) {
    return word.substring(0, 1).toUpperCase() + word.substring(1, word.length())
}

//get current time
def static getCurrentTime() {
    DateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd HH-mm-ss")
    String currentTime = dateFormat.format(new Date())
    return currentTime
}
