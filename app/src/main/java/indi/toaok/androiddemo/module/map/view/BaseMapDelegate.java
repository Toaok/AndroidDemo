package indi.toaok.androiddemo.module.map.view;import android.graphics.Color;import android.util.Log;import android.view.View;import com.amap.api.maps.AMap;import com.amap.api.maps.CameraUpdateFactory;import com.amap.api.maps.CoordinateConverter;import com.amap.api.maps.MapView;import com.amap.api.maps.model.CameraPosition;import com.amap.api.maps.model.LatLng;import com.amap.api.maps.model.Marker;import com.amap.api.maps.model.MyLocationStyle;import butterknife.BindView;import indi.toaok.androiddemo.R;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import indi.toaok.androiddemo.base.view.BaseDelegate;import indi.toaok.androiddemo.module.map.marker.GDMarkerOptions;import indi.toaok.androiddemo.module.map.marker.MarkerBuilder;import indi.toaok.androiddemo.module.map.marker.MarkerHelper;/** * @author Toaok * @version 1.0  2018/9/8. */public class BaseMapDelegate extends BaseDelegate {    /**     * 默认的地图缩放比例     */    private final int MAP_ZOOM_SIZE_NORMAL = 16;    @BindView(R.id.map_view)    protected MapView mapView;    protected AMap aMap;    protected int mapZoom = MAP_ZOOM_SIZE_NORMAL;    /**     * 存在地图上的markers     */    private HashMap<MarkerHelper.MarkerType, List<Marker>> markersMap = new HashMap<>();    @Override    public int getRootLayoutId() {        return R.layout.fragment_map;    }    @Override    public void initView() {        super.initView();        init();    }    protected void init() {//        mapView = get(R.id.map_view);        initMap(mapView.getMap());    }    protected void initMap(MapView mapView) {        this.mapView = mapView;        initMap(mapView.getMap());    }    protected void initMap(AMap amap) {        if (aMap == null) {            aMap = amap;        }        //设置定位按钮是否显示        aMap.getUiSettings().setMyLocationButtonEnabled(true);        //设置缩放按钮是否可见        aMap.getUiSettings().setZoomControlsEnabled(false);        //设置地图是否支持倾斜手势        aMap.getUiSettings().setTiltGesturesEnabled(true);        //设置地图是否支持旋转旋转        aMap.getUiSettings().setRotateGesturesEnabled(true);        //设置高德logo位置        aMap.getUiSettings().setLogoBottomMargin(-100);        MyLocationStyle myLocationStyle = new MyLocationStyle();        myLocationStyle.strokeWidth(0);        myLocationStyle.interval(1000); //设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。        myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_FOLLOW);//连续定位、且将视角移动到地图中心点，定位蓝点跟随设备移动。（1秒1次定位）        myLocationStyle.radiusFillColor(Color.TRANSPARENT);        myLocationStyle.strokeColor(Color.WHITE);        aMap.setMyLocationEnabled(true);        aMap.setMyLocationStyle(myLocationStyle);        /**         *  地图移动摄像头监听         */        aMap.setOnCameraChangeListener(new AMap.OnCameraChangeListener() {            @Override            public void onCameraChangeFinish(CameraPosition arg0) {                BaseMapDelegate.this.onCameraChangeFinish(arg0);            }            @Override            public void onCameraChange(CameraPosition arg0) {                BaseMapDelegate.this.onCameraChange(arg0);            }        });        /**         * 点击marker 回调 InfoWindowAdapter 控制弹出的窗口渲染         */        aMap.setInfoWindowAdapter(new AMap.InfoWindowAdapter() {            @Override            public View getInfoWindow(Marker marker) {                return BaseMapDelegate.this.getInfoWindow(marker);            }            @Override            public View getInfoContents(Marker marker) {                return BaseMapDelegate.this.getInfoContents(marker);            }        });    }    /**     * 地图中心点移动结束回调     *     * @param cameraPosition     */    protected void onCameraChangeFinish(CameraPosition cameraPosition) {    }    /**     * 地图中心点移动时回调     *     * @param cameraPosition     */    protected void onCameraChange(CameraPosition cameraPosition) {/*        Log.d("坐标装换", "转换前：" + cameraPosition.target.toString());        CoordinateConverter converter = new CoordinateConverter(getActivity());        // CoordType.GPS 待转换坐标类型        converter.from(CoordinateConverter.CoordType.GPS);        // sourceLatLng待转换坐标点 LatLng类型        converter.coord(cameraPosition.target);        // 执行转换操作        LatLng desLatLng = converter.convert();        Log.d("坐标装换", "转换后：" + desLatLng.toString());*/    }    /**     * 点击marker 回调 InfoWindowAdapter 控制弹出的窗口渲染     *     * @param marker     */    protected View getInfoContents(Marker marker) {        return null;    }    protected View getInfoWindow(Marker marker) {        return null;    }    public MapView getMapView() {        return mapView;    }    public void addMarkers(MarkerBuilder builder) {        if (aMap == null || builder == null || builder.getDatas() == null || builder.getDatas().isEmpty()) {            return;        }        List<Marker> markerList;        if (markersMap.containsKey(builder.getType())) {            markerList = markersMap.get(builder.getType());        } else {            markerList = new ArrayList<>();            markersMap.put(builder.getType(), markerList);        }        // 渲染并加入缓存        for (GDMarkerOptions markerOption : builder.getDatas()) {            if (markerOption.getMarkerOptions() != null) {                Marker marker = aMap.addMarker(markerOption.getMarkerOptions());                markerList.add(marker);                marker.setRotateAngle(markerOption.getRotateAngle());                marker.showInfoWindow();            }        }    }    public void moveToLatLng(LatLng latLng) {        if (aMap == null || latLng == null) {            return;        }        aMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latLng, mapZoom));    }}