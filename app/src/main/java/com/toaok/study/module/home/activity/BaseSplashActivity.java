package com.toaok.study.module.home.activity;import android.os.Bundle;import android.os.CountDownTimer;import android.support.annotation.Nullable;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.View;import com.toaok.study.BuildConfig;import com.toaok.study.R;import com.toaok.study.module.base.presenter.activity.BaseActivity;import com.toaok.study.common.cache.SplashImageCache;import com.toaok.study.model.vo.SplashImageBean;import com.toaok.study.module.home.bean.SplashBean;import com.toaok.study.module.home.view.SplashDelegate;import com.toaok.utilcode.util.NetworkUtils;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.io.IOException;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.List;public abstract class BaseSplashActivity<T extends SplashDelegate> extends BaseActivity<T> implements View.OnClickListener {    private SplashImageCache mSplashImageCache;    protected SplashBean mSplashBean;    private boolean isToHome;    //定时器    private CountDownTimer mCountDownTimer = new CountDownTimer(6000, 1000) {        @Override        public void onTick(long millisUntilFinished) {            if (mSplashBean != null) {                mSplashBean.setCountDownTimer("跳过 " + millisUntilFinished / 1000 + "s");                notifyModelChanged(mSplashBean);                if (!mSplashBean.isAvailableByPing() && millisUntilFinished / 1000 == 3) {                    over();                }            }        }        @Override        public void onFinish() {            over();        }    };    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        init();    }    /**     * 绑定监听事件     */    @Override    protected void bindEvenListener() {        super.bindEvenListener();        viewDelegate.setOnClickListener(this, R.id.tv_count_down_timer);    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.tv_count_down_timer:                over();                break;        }    }    /**     * 屏蔽返回键     */    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        return keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN || super.onKeyDown(keyCode, event);    }    void init() {        initView();    }    /**     * 初始化视图，检查是否有网络，若有网加载网络图片停5s，没有则在启动页停2s后进入主页。     * TODO 当使用VPN时图片加载不出来，显示有问题     */    private void initView() {        if (NetworkUtils.isAvailableByPing()) {            mSplashImageCache = new SplashImageCache(this);            if (mSplashBean == null) mSplashBean = new SplashBean();            if (mSplashImageCache.isEmpty()) {                getSplashData();            } else {                updatUI(mSplashImageCache.getData().get((int) (Math.random() * (mSplashImageCache.dataSize()))));            }        } else {            if (mSplashBean == null) mSplashBean = new SplashBean();            mSplashBean.setAvailableByPing(false);            if (mCountDownTimer != null)                mCountDownTimer.start();        }    }    private void getSplashData() {        new Thread(new DataTask(new WeakReference<>(this))).start();    }    private void updatUI(final SplashImageBean bean) {        runOnUiThread(() -> {            mCountDownTimer.start();            if (!TextUtils.isEmpty(bean.getUrl())) {                Log.i("imageUrl", bean.getUrl());                if (mSplashBean == null) {                    mSplashBean = new SplashBean(bean.getUrl());                }                mSplashBean.setUrl(bean.getUrl());            }        });    }    private synchronized void jumpHome() {        if (!isToHome)            MainActivity.startActivity(BaseSplashActivity.this);        isToHome = true;        finish();    }    private void clearTimer() {        if (mCountDownTimer != null) {            mCountDownTimer.cancel();            mCountDownTimer = null;        }    }    private void over() {        clearTimer();        jumpHome();    }    @Override    protected void onDestroy() {        super.onDestroy();        clearTimer();    }    /**     * 避免内存泄漏。     */    static class DataTask implements Runnable {        WeakReference<BaseSplashActivity> mWeakReference;        public DataTask(WeakReference<BaseSplashActivity> weakReference) {            this.mWeakReference = weakReference;        }        @Override        public void run() {            BaseSplashActivity activity = mWeakReference.get();            List<SplashImageBean> images = new ArrayList<>();            try {                Document document = Jsoup.connect(BuildConfig.SPLASH_URL).get();                Elements imgs = document.select(BuildConfig.SPLASH_CSSQUERY);                for (int i = 0; i < imgs.size(); ++i) {                    Element e = imgs.get(i);                    String src = e.attr(BuildConfig.SPLASH_ATTRIBUTEKEY);                    if (!TextUtils.isEmpty(src)) {                        SplashImageBean bean = new SplashImageBean();                        bean.setUrl(src);                        bean.setId(i);                        images.add(bean);                    }                }            } catch (IOException e) {                e.printStackTrace();            }            activity.mSplashImageCache.setData(images);            activity.runOnUiThread(new Runnable() {                @Override                public void run() {                    activity.updatUI(activity.mSplashImageCache.getData().get((int) (Math.random() * (activity.mSplashImageCache.dataSize()))));                }            });            activity.mSplashImageCache.saveData();        }    }}